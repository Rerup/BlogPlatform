@using BlogPlatform.Components.States
@using BlogPlatform.Services.Contracts
@using BlogPlatform.Components.Pages.BlogPage.BaseComponents.Rating
@using Domain.BlogDomain
@inject IClientBlogService BlogService
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

<div class="blog card border border-primary">
    <div class="card-body">
        @if (Blog is null)
        {
            <LoadingState />
        }
        else
        {
            <a href="/blog/view/@Blog.Id" class="card-title text-dark text-decoration-none">
                <h5>@Blog.Title</h5>
            </a>

            <EditForm Model="@Blog" OnValidSubmit="SaveBlog" FormName="SaveBlog">
                <DataAnnotationsValidator />

                @if (isEditing)
                {
                    <InputTextArea class="form-control textarea" @bind-Value="Blog.Content" />
                    <ValidationMessage For="@(() => Blog.Content)" />

                    <div class="d-flex justify-content-end mt-3">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
                }
                else
                {
                    <p class="card-text mt-2">@((Blog.Content.Length > 100) ? Blog.Content.Substring(0, 100) + "..." :
                Blog.Content)</p>
                }

            </EditForm>

            <div class="justify-content-end d-flex">
                <a href="/blog/view/@Blog.Id" class="btn rounded text-info">View blog</a>
            </div>

            @if (!isEditing)
            {

                <div class="justify-content-end d-flex">
                    <a @onclick="ToggleEdit" class="btn rounded text-info">Edit blog</a>
                </div>
            }

            <div class="justify-content-end d-flex">
                <a @onclick="DeleteBlog" class="btn rounded text-danger text-decoration-none">Delete blog</a>
            </div>

            <div class="card-footer">

            <div class="row">
                <div class="col">
                    <div>
                        <i class="bi bi-chat"></i> @Blog.Comments?.Count()
                    </div>

                    <div>
                        <i class="bi bi-calendar"></i> posted on: @Blog.CreatedAt.ToString("dd-MM-yyyy")
                    </div>
                    @if (Blog.CreatedAt != Blog.UpdatedAt)
                        {
                            <div>
                                <i class="bi bi-calendar"></i> updated on: @Blog.UpdatedAt.ToString("dd-MM-yyyy")
                            </div>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <BlogRating RatingAmount="@Blog.Rating" />
                    </div>
                    <div class="col ">
                        <div class="justify-content-end d-flex">
                            <a href="/review/@Blog.Id/create" class="btn btn-primary">Review</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public required Blog Blog { get; set; }

    private bool isEditing = false;

    [Parameter]
    public EventCallback OnDeleteBlog { get; set; }

    private async Task DeleteBlog()
    {

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you wish to delete the blog?");

        if (confirmed)
        {
            await BlogService.DeleteBlogAsync(Blog.Id);

            await OnDeleteBlog.InvokeAsync();

            ToastService.ShowSuccess("Blog deleted!");
        }
    }

    private async Task SaveBlog()
    {
        var newBlog = await BlogService.UpdateBlogAsync(Blog);

        ToggleEdit();

        ToastService.ShowSuccess("Blog updated!");
    }

    private void ToggleEdit()
    {
        isEditing = !isEditing;
    }
}